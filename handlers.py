from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_session, Post, PostSchedule, Channel, PostChannel, ScheduledJob
from config import ADMIN_ID, MAX_POSTS, MAX_CHANNELS_PER_POST
import re
import logging

logger = logging.getLogger(__name__)

def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id != ADMIN_ID:
            if update.message:
                await update.message.reply_text("‚ùå No tienes permisos de administrador.")
            elif update.callback_query:
                await update.callback_query.answer("‚ùå No tienes permisos de administrador.", show_alert=True)
            return
        return await func(update, context)
    return wrapper

@admin_only
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìã Mis Posts", callback_data="list_posts")],
        [InlineKeyboardButton("‚ûï Crear Post", callback_data="create_post")],
        [InlineKeyboardButton("üì∫ Gestionar Canales", callback_data="manage_channels")],
        [InlineKeyboardButton("üìä Estad√≠sticas", callback_data="statistics")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = (
        "ü§ñ **Bienvenido al Auto Post Bot**\n\n"
        "Selecciona una opci√≥n:"
    )
    
    if update.message:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

@admin_only
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # Navegaci√≥n principal
    if data == "back_main":
        await start(update, context)
    elif data == "list_posts":
        await list_posts(query)
    elif data == "create_post":
        await create_post_prompt(query, context)
    elif data == "manage_channels":
        await manage_channels_menu(query)
    elif data == "statistics":
        await show_statistics(query)
    
    # Acciones de posts espec√≠ficos
    elif data.startswith("post_"):
        await handle_post_action(query, data)
    elif data.startswith("configure_schedule_"):
        post_id = int(data.split('_')[2])
        await configure_schedule_menu(query, post_id)
    elif data.startswith("configure_channels_"):
        post_id = int(data.split('_')[2])
        await configure_channels_menu(query, context, post_id)
    elif data.startswith("delete_post_"):
        post_id = int(data.split('_')[2])
        await confirm_delete_post(query, post_id)
    elif data.startswith("confirm_delete_"):
        post_id = int(data.split('_')[2])
        await delete_post(query, post_id)
    
    # Configuraci√≥n de horarios
    elif data.startswith("set_time_"):
        post_id = int(data.split('_')[2])
        await prompt_set_time(query, context, post_id)
    elif data.startswith("set_delete_"):
        post_id = int(data.split('_')[2])
        await prompt_set_delete_hours(query, context, post_id)
    elif data.startswith("set_days_"):
        post_id = int(data.split('_')[2])
        await configure_days_menu(query, context, post_id)
    elif data.startswith("toggle_day_"):
        parts = data.split('_')
        post_id, day_num = int(parts[2]), int(parts[3])
        await toggle_day(query, context, post_id, day_num)
    elif data.startswith("save_days_"):
        post_id = int(data.split('_')[2])
        await save_days(query, context, post_id)
    
    # Gesti√≥n de canales
    elif data == "add_channel":
        await prompt_add_channel(query, context)
    elif data == "remove_channel":
        await show_remove_channel_menu(query)
    elif data == "list_channels":
        await show_channels_list(query)
    elif data.startswith("remove_channel_"):
        channel_id = int(data.split('_')[2])
        await remove_channel(query, channel_id)
    
    # Asignaci√≥n de canales a posts
    elif data.startswith("toggle_channel_"):
        parts = data.split('_')
        post_id, channel_id = int(parts[2]), parts[3]
        await toggle_channel_assignment(query, context, post_id, channel_id)
    elif data.startswith("save_assignments_"):
        post_id = int(data.split('_')[2])
        await save_channel_assignments(query, context, post_id)

async def list_posts(query):
    session = get_session()
    posts = session.query(Post).filter_by(is_active=True).all()
    session.close()
    
    if not posts:
        keyboard = [[InlineKeyboardButton("üîô Volver", callback_data="back_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì≠ No hay posts activos.", reply_markup=reply_markup)
        return
    
    keyboard = []
    for post in posts:
        keyboard.append([
            InlineKeyboardButton(
                f"üìÑ {post.name} ({post.content_type.title()})",
                callback_data=f"post_{post.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô Volver", callback_data="back_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìã **Posts Activos:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_post_action(query, data):
    post_id = int(data.split('_')[1])
    session = get_session()
    
    post = session.query(Post).filter_by(id=post_id).first()
    if not post:
        await query.edit_message_text("‚ùå Post no encontrado.")
        session.close()
        return
    
    schedule = session.query(PostSchedule).filter_by(post_id=post_id).first()
    assigned_channels = session.query(PostChannel).filter_by(post_id=post_id).count()
    
    session.close()
    
    # Informaci√≥n del horario
    schedule_info = "No configurado"
    if schedule:
        days_map = {1: "L", 2: "M", 3: "X", 4: "J", 5: "V", 6: "S", 7: "D"}
        current_days = [int(d) for d in schedule.days_of_week.split(',')]
        days_display = "".join([days_map[d] for d in current_days])
        schedule_info = f"{schedule.send_time} ({days_display}) - Eliminar: {schedule.delete_after_hours}h"
    
    keyboard = [
        [InlineKeyboardButton("‚è∞ Configurar Horario", callback_data=f"configure_schedule_{post.id}")],
        [InlineKeyboardButton("üì∫ Asignar Canales", callback_data=f"configure_channels_{post.id}")],
        [InlineKeyboardButton("üóëÔ∏è Eliminar Post", callback_data=f"delete_post_{post.id}")],
        [InlineKeyboardButton("üîô Volver", callback_data="list_posts")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"**üìÑ {post.name}**\n\n"
        f"**Tipo:** {post.content_type.title()}\n"
        f"**Horario:** {schedule_info}\n"
        f"**Canales:** {assigned_channels} asignados\n"
        f"**Fuente:** `{post.source_channel}`",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# --- CREAR POSTS ---
async def create_post_prompt(query, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'waiting_for_post'
    
    await query.edit_message_text(
        "üì§ **Para crear un post:**\n\n"
        "1. Ve al canal fuente\n"
        "2. **Reenv√≠a** el mensaje al bot\n"
        "3. El bot detectar√° autom√°ticamente el contenido\n\n"
        "**Tipos soportados:**\n"
        "‚Ä¢ Texto, Fotos, Videos\n"
        "‚Ä¢ Audio, Documentos, GIFs\n"
        "‚Ä¢ Stickers, Mensajes de voz\n\n"
        "‚ö†Ô∏è **Importante:** Usa 'Reenviar', no copiar",
        parse_mode='Markdown'
    )

async def handle_post_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    
    if context.user_data.get('state') != 'waiting_for_post':
        return
    
    message = update.message
    
    if not message.forward_origin:
        await message.reply_text("‚ùå Por favor reenv√≠a un mensaje desde un canal.")
        return
    
    session = get_session()
    try:
        post_count = session.query(Post).filter_by(is_active=True).count()
        
        if post_count >= MAX_POSTS:
            await message.reply_text(f"‚ùå M√°ximo {MAX_POSTS} posts permitidos. Elimina uno existente primero.")
            return
        
        # Detectar tipo de contenido
        content_type, file_id, text = extract_content_info(message)
        
        if not content_type:
            await message.reply_text("‚ùå Tipo de contenido no soportado.")
            return
        
        # Obtener informaci√≥n de la fuente
        source_channel = None
        source_message_id = None
        
        if hasattr(message.forward_origin, 'chat'):
            source_channel = str(message.forward_origin.chat.id)
            source_message_id = message.forward_origin.message_id
        else:
            source_channel = str(message.chat.id)
            source_message_id = message.message_id
        
        # Crear post
        post = Post(
            name=f"Post {post_count + 1}",
            source_channel=source_channel,
            source_message_id=source_message_id,
            content_type=content_type,
            content_text=text or "",
            file_id=file_id
        )
        
        session.add(post)
        session.commit()
        
        # Crear horario por defecto
        schedule = PostSchedule(
            post_id=post.id,
            send_time="09:00",
            delete_after_hours=24,
            days_of_week="1,2,3,4,5,6,7"
        )
        session.add(schedule)
        session.commit()
        
        context.user_data.pop('state', None)
        
        await message.reply_text(
            f"‚úÖ **Post creado exitosamente!**\n\n"
            f"**ID:** {post.id}\n"
            f"**Nombre:** {post.name}\n"
            f"**Tipo:** {content_type.title()}\n\n"
            f"Usa /start para configurar horarios y canales.",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        session.rollback()
        logger.error(f"Error creating post: {e}")
        await message.reply_text(f"‚ùå Error al crear el post: {str(e)}")
    finally:
        session.close()

def extract_content_info(message):
    """Extrae informaci√≥n del contenido del mensaje"""
    content_type = None
    file_id = None
    text = None
    
    if message.text:
        content_type = 'text'
        text = message.text
    elif message.photo:
        content_type = 'photo'
        file_id = message.photo[-1].file_id
        text = message.caption
    elif message.video:
        content_type = 'video'
        file_id = message.video.file_id
        text = message.caption
    elif message.audio:
        content_type = 'audio'
        file_id = message.audio.file_id
        text = message.caption
    elif message.document:
        content_type = 'document'
        file_id = message.document.file_id
        text = message.caption
    elif message.animation:
        content_type = 'animation'
        file_id = message.animation.file_id
        text = message.caption
    elif message.sticker:
        content_type = 'sticker'
        file_id = message.sticker.file_id
        text = message.sticker.emoji
    elif message.voice:
        content_type = 'voice'
        file_id = message.voice.file_id
        text = message.caption
    
    return content_type, file_id, text

# --- CONFIGURACI√ìN DE HORARIOS ---
async def configure_schedule_menu(query, post_id):
    session = get_session()
    post = session.query(Post).filter_by(id=post_id).first()
    schedule = session.query(PostSchedule).filter_by(post_id=post_id).first()
    session.close()
    
    if not post or not schedule:
        await query.edit_message_text("‚ùå Post o horario no encontrado.")
        return
    
    days_map = {1: "Lun", 2: "Mar", 3: "Mi√©", 4: "Jue", 5: "Vie", 6: "S√°b", 7: "Dom"}
    current_days = [int(d) for d in schedule.days_of_week.split(',')]
    days_display = ", ".join([days_map[d] for d in current_days])
    
    keyboard = [
        [InlineKeyboardButton(f"üïê Hora: {schedule.send_time}", callback_data=f"set_time_{post_id}")],
        [InlineKeyboardButton(f"‚è∞ Eliminar despu√©s: {schedule.delete_after_hours}h", callback_data=f"set_delete_{post_id}")],
        [InlineKeyboardButton(f"üìÖ D√≠as: {days_display}", callback_data=f"set_days_{post_id}")],
        [InlineKeyboardButton("üîô Volver", callback_data=f"post_{post_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚öôÔ∏è **Configurar Horario**\n\n"
        f"**Post:** {post.name}\n\n"
        f"Selecciona qu√© configurar:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def prompt_set_time(query, context: ContextTypes.DEFAULT_TYPE, post_id):
    context.user_data['state'] = 'waiting_time'
    context.user_data['post_id'] = post_id
    
    await query.edit_message_text(
        "üïê **Configurar Hora de Env√≠o**\n\n"
        "Env√≠a la hora en formato **HH:MM**\n"
        "Ejemplos: `09:30`, `14:00`, `20:15`",
        parse_mode='Markdown'
    )

async def prompt_set_delete_hours(query, context: ContextTypes.DEFAULT_TYPE, post_id):
    context.user_data['state'] = 'waiting_delete_hours'
    context.user_data['post_id'] = post_id
    
    await query.edit_message_text(
        "‚è∞ **Horas para Eliminar**\n\n"
        "Env√≠a el n√∫mero de horas (1-48)\n"
        "Ejemplos: `1`, `6`, `24`\n\n"
        "Env√≠a `0` para no eliminar autom√°ticamente",
        parse_mode='Markdown'
    )

async def configure_days_menu(query, context: ContextTypes.DEFAULT_TYPE, post_id):
    session = get_session()
    schedule = session.query(PostSchedule).filter_by(post_id=post_id).first()
    session.close()
    
    if not schedule:
        await query.edit_message_text("‚ùå Horario no encontrado.")
        return
    
    current_days = [int(d) for d in schedule.days_of_week.split(',')]
    context.user_data['selected_days'] = current_days.copy()
    context.user_data['configuring_post_id'] = post_id
    
    await update_days_menu(query, context, post_id)

async def update_days_menu(query, context: ContextTypes.DEFAULT_TYPE, post_id):
    selected_days = context.user_data.get('selected_days', [])
    
    days_map = {
        1: "Lunes", 2: "Martes", 3: "Mi√©rcoles", 4: "Jueves",
        5: "Viernes", 6: "S√°bado", 7: "Domingo"
    }
    
    keyboard = []
    for day_num, day_name in days_map.items():
        status = "‚úÖ" if day_num in selected_days else "‚ùå"
        keyboard.append([
            InlineKeyboardButton(
                f"{status} {day_name}",
                callback_data=f"toggle_day_{post_id}_{day_num}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üíæ Guardar", callback_data=f"save_days_{post_id}")])
    keyboard.append([InlineKeyboardButton("üîô Cancelar", callback_data=f"configure_schedule_{post_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìÖ **Seleccionar D√≠as**\n\n"
        "Haz clic para activar/desactivar d√≠as:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def toggle_day(query, context: ContextTypes.DEFAULT_TYPE, post_id, day_num):
    selected_days = context.user_data.get('selected_days', [])
    
    if day_num in selected_days:
        selected_days.remove(day_num)
    else:
        selected_days.append(day_num)
    
    context.user_data['selected_days'] = selected_days
    await update_days_menu(query, context, post_id)

async def save_days(query, context: ContextTypes.DEFAULT_TYPE, post_id):
    selected_days = context.user_data.get('selected_days', [])
    
    if not selected_days:
        await query.answer("‚ùå Selecciona al menos un d√≠a", show_alert=True)
        return
    
    session = get_session()
    try:
        schedule = session.query(PostSchedule).filter_by(post_id=post_id).first()
        if schedule:
            schedule.days_of_week = ','.join(map(str, sorted(selected_days)))
            session.commit()
            
            # Reprogramar en el scheduler
            from scheduler import reschedule_post_job
            reschedule_post_job(query.bot, post_id)
            
            await query.answer("‚úÖ D√≠as guardados correctamente")
            context.user_data.pop('selected_days', None)
            context.user_data.pop('configuring_post_id', None)
            
            await configure_schedule_menu(query, post_id)
        else:
            await query.edit_message_text("‚ùå Horario no encontrado.")
    except Exception as e:
        session.rollback()
        logger.error(f"Error saving days: {e}")
        await query.edit_message_text(f"‚ùå Error al guardar: {str(e)}")
    finally:
        session.close()

# --- GESTI√ìN DE CANALES ---
async def manage_channels_menu(query):
    keyboard = [
        [InlineKeyboardButton("‚ûï A√±adir Canal", callback_data="add_channel")],
        [InlineKeyboardButton("‚ûñ Eliminar Canal", callback_data="remove_channel")],
        [InlineKeyboardButton("üìã Ver Canales", callback_data="list_channels")],
        [InlineKeyboardButton("üîô Volver", callback_data="back_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üì∫ **Gesti√≥n de Canales**\n\n"
        "Selecciona una opci√≥n:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def prompt_add_channel(query, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'waiting_channel'
    
    await query.edit_message_text(
        "‚ûï **A√±adir Canal**\n\n"
        "Env√≠a el canal en uno de estos formatos:\n"
        "‚Ä¢ `@nombre_canal`\n"
        "‚Ä¢ `https://t.me/nombre_canal`\n"
        "‚Ä¢ `-1001234567890` (ID)\n\n"
        "‚ö†Ô∏è El bot debe ser admin en el canal",
        parse_mode='Markdown'
    )

async def show_channels_list(query):
    session = get_session()
    channels = session.query(Channel).all()
    session.close()
    
    if not channels:
        keyboard = [[InlineKeyboardButton("üîô Volver", callback_data="manage_channels")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì≠ No hay canales registrados.", reply_markup=reply_markup)
        return
    
    message = "üì∫ **Canales Registrados:**\n\n"
    for i, channel in enumerate(channels, 1):
        name = channel.channel_name or channel.channel_username or channel.channel_id
        message += f"{i}. `{name}`\n"
    
    keyboard = [[InlineKeyboardButton("üîô Volver", callback_data="manage_channels")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

async def show_remove_channel_menu(query):
    session = get_session()
    channels = session.query(Channel).all()
    session.close()
    
    if not channels:
        keyboard = [[InlineKeyboardButton("üîô Volver", callback_data="manage_channels")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì≠ No hay canales para eliminar.", reply_markup=reply_markup)
        return
    
    keyboard = []
    for channel in channels:
        name = channel.channel_name or channel.channel_username or channel.channel_id
        keyboard.append([
            InlineKeyboardButton(f"üóëÔ∏è {name}", callback_data=f"remove_channel_{channel.id}")
        ])
    
    keyboard.append([InlineKeyboardButton("üîô Volver", callback_data="manage_channels")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ûñ **Eliminar Canal**\n\nSelecciona el canal:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def remove_channel(query, channel_id):
    session = get_session()
    try:
        channel = session.query(Channel).filter_by(id=channel_id).first()
        if channel:
            # Eliminar asignaciones
            session.query(PostChannel).filter_by(channel_id=channel.channel_id).delete()
            session.delete(channel)
            session.commit()
            
            await query.answer("‚úÖ Canal eliminado correctamente")
            await manage_channels_menu(query)
        else:
            await query.edit_message_text("‚ùå Canal no encontrado.")
    except Exception as e:
        session.rollback()
        logger.error(f"Error removing channel: {e}")
        await query.edit_message_text(f"‚ùå Error: {str(e)}")
    finally:
        session.close()

# --- ASIGNACI√ìN DE CANALES A POSTS ---
async def configure_channels_menu(query, context: ContextTypes.DEFAULT_TYPE, post_id):
    session = get_session()
    
    all_channels = session.query(Channel).all()
    if not all_channels:
        keyboard = [[InlineKeyboardButton("üîô Volver", callback_data=f"post_{post_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ùå No hay canales disponibles.\nPrimero a√±ade canales.",
            reply_markup=reply_markup
        )
        session.close()
        return
    
    # Obtener canales asignados actualmente
    assigned = session.query(PostChannel).filter_by(post_id=post_id).all()
    assigned_ids = [pc.channel_id for pc in assigned]
    
    session.close()
    
    # Guardar selecci√≥n actual
    context.user_data['channel_assignments'] = assigned_ids.copy()
    context.user_data['assigning_post_id'] = post_id
    
    await update_channels_menu(query, context, post_id)

async def update_channels_menu(query, context: ContextTypes.DEFAULT_TYPE, post_id):
    session = get_session()
    all_channels = session.query(Channel).all()
    session.close()
    
    selected_channels = context.user_data.get('channel_assignments', [])
    
    keyboard = []
    for channel in all_channels:
        status = "‚úÖ" if channel.channel_id in selected_channels else "‚ùå"
        name = channel.channel_name or channel.channel_username or channel.channel_id
        keyboard.append([
            InlineKeyboardButton(
                f"{status} {name}",
                callback_data=f"toggle_channel_{post_id}_{channel.channel_id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üíæ Guardar", callback_data=f"save_assignments_{post_id}")])
    keyboard.append([InlineKeyboardButton("üîô Cancelar", callback_data=f"post_{post_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üì∫ **Asignar Canales**\n\n"
        f"Seleccionados: {len(selected_channels)}/{MAX_CHANNELS_PER_POST}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def toggle_channel_assignment(query, context: ContextTypes.DEFAULT_TYPE, post_id, channel_id):
    selected_channels = context.user_data.get('channel_assignments', [])
    
    if channel_id in selected_channels:
        selected_channels.remove(channel_id)
    else:
        if len(selected_channels) >= MAX_CHANNELS_PER_POST:
            await query.answer(f"‚ùå M√°ximo {MAX_CHANNELS_PER_POST} canales", show_alert=True)
            return
        selected_channels.append(channel_id)
    
    context.user_data['channel_assignments'] = selected_channels
    await update_channels_menu(query, context, post_id)

async def save_channel_assignments(query, context: ContextTypes.DEFAULT_TYPE, post_id):
    selected_channels = context.user_data.get('channel_assignments', [])
    
    session = get_session()
    try:
        # Eliminar asignaciones existentes
        session.query(PostChannel).filter_by(post_id=post_id).delete()
        
        # A√±adir nuevas asignaciones
        for channel_id in selected_channels:
            post_channel = PostChannel(post_id=post_id, channel_id=channel_id)
            session.add(post_channel)
        
        session.commit()
        
        context.user_data.pop('channel_assignments', None)
        context.user_data.pop('assigning_post_id', None)
        
        await query.answer(f"‚úÖ {len(selected_channels)} canales asignados")
        await handle_post_action(query, f"post_{post_id}")
        
    except Exception as e:
        session.rollback()
        logger.error(f"Error saving assignments: {e}")
        await query.edit_message_text(f"‚ùå Error: {str(e)}")
    finally:
        session.close()

# --- ELIMINAR POSTS ---
async def confirm_delete_post(query, post_id):
    session = get_session()
    post = session.query(Post).filter_by(id=post_id).first()
    session.close()
    
    if not post:
        await query.edit_message_text("‚ùå Post no encontrado.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è S√≠, Eliminar", callback_data=f"confirm_delete_{post_id}")],
        [InlineKeyboardButton("‚ùå Cancelar", callback_data=f"post_{post_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚ö†Ô∏è **Confirmar Eliminaci√≥n**\n\n"
        f"¬øEliminar **{post.name}**?\n"
        f"Esta acci√≥n es irreversible.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def delete_post(query, post_id):
    session = get_session()
    try:
        post = session.query(Post).filter_by(id=post_id).first()
        if post:
            # Eliminar registros relacionados
            session.query(PostChannel).filter_by(post_id=post_id).delete()
            session.query(PostSchedule).filter_by(post_id=post_id).delete()
            session.query(ScheduledJob).filter_by(post_id=post_id).delete()
            session.delete(post)
            session.commit()
            
            # Eliminar trabajos del scheduler
            from scheduler import remove_post_jobs
            remove_post_jobs(post_id)
            
            await query.answer("‚úÖ Post eliminado")
            await list_posts(query)
        else:
            await query.edit_message_text("‚ùå Post no encontrado.")
    except Exception as e:
        session.rollback()
        logger.error(f"Error deleting post: {e}")
        await query.edit_message_text(f"‚ùå Error: {str(e)}")
    finally:
        session.close()

# --- ESTAD√çSTICAS ---
async def show_statistics(query):
    session = get_session()
    
    total_posts = session.query(Post).filter_by(is_active=True).count()
    total_channels = session.query(Channel).count()
    total_schedules = session.query(PostSchedule).filter_by(is_enabled=True).count()
    
    session.close()
    
    keyboard = [[InlineKeyboardButton("üîô Volver", callback_data="back_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    status = "üü¢ Operativo" if total_posts > 0 else "üü° Sin posts"
    
    await query.edit_message_text(
        f"üìä **Estad√≠sticas del Bot**\n\n"
        f"**Posts Activos:** {total_posts}/{MAX_POSTS}\n"
        f"**Canales:** {total_channels}\n"
        f"**Horarios:** {total_schedules}\n"
        f"**Estado:** {status}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# --- MANEJO DE ENTRADA DE TEXTO ---
async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    
    state = context.user_data.get('state')
    text = update.message.text.strip()
    
    if state == 'waiting_time':
        await handle_time_input(update, context, text)
    elif state == 'waiting_delete_hours':
        await handle_delete_hours_input(update, context, text)
    elif state == 'waiting_channel':
        await handle_channel_input(update, context, text)

async def handle_time_input(update, context, text):
    if not re.match(r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$', text):
        await update.message.reply_text("‚ùå Formato inv√°lido. Usa HH:MM (ej: 09:30)")
        return
    
    post_id = context.user_data.get('post_id')
    session = get_session()
    
    try:
        schedule = session.query(PostSchedule).filter_by(post_id=post_id).first()
        if schedule:
            schedule.send_time = text
            session.commit()
            
            from scheduler import reschedule_post_job
            reschedule_post_job(context.bot, post_id)
            
            await update.message.reply_text(f"‚úÖ Hora configurada: {text}")
            context.user_data.pop('state', None)
            context.user_data.pop('post_id', None)
        else:
            await update.message.reply_text("‚ùå Horario no encontrado.")
    except Exception as e:
        session.rollback()
        logger.error(f"Error setting time: {e}")
        await update.message.reply_text(f"‚ùå Error: {str(e)}")
    finally:
        session.close()

async def handle_delete_hours_input(update, context, text):
    try:
        hours = int(text)
        if hours < 0 or hours > 48:
            await update.message.reply_text("‚ùå Debe ser entre 0 y 48 horas")
            return
    except ValueError:
        await update.message.reply_text("‚ùå Ingresa un n√∫mero v√°lido")
        return
    
    post_id = context.user_data.get('post_id')
    session = get_session()
    
    try:
        schedule = session.query(PostSchedule).filter_by(post_id=post_id).first()
        if schedule:
            schedule.delete_after_hours = hours
            session.commit()
            
            await update.message.reply_text(f"‚úÖ Configurado: eliminar despu√©s de {hours} horas")
            context.user_data.pop('state', None)
            context.user_data.pop('post_id', None)
        else:
            await update.message.reply_text("‚ùå Horario no encontrado.")
    except Exception as e:
        session.rollback()
        logger.error(f"Error setting delete hours: {e}")
        await update.message.reply_text(f"‚ùå Error: {str(e)}")
    finally:
        session.close()

async def handle_channel_input(update, context, text):
    channel_info = extract_channel_info(text)
    
    if not channel_info:
        await update.message.reply_text(
            "‚ùå Formato inv√°lido. Usa:\n"
            "‚Ä¢ @nombre_canal\n"
            "‚Ä¢ https://t.me/nombre_canal\n"
            "‚Ä¢ -1001234567890"
        )
        return
    
    session = get_session()
    try:
        # Verificar si ya existe
        existing = session.query(Channel).filter_by(channel_id=channel_info).first()
        if existing:
            await update.message.reply_text("‚ùå Este canal ya est√° registrado")
            return
        
        # Intentar obtener informaci√≥n del canal
        channel_name = None
        channel_username = None
        
        try:
            chat = await context.bot.get_chat(channel_info)
            channel_info = str(chat.id)
            channel_name = chat.title
            channel_username = chat.username
        except Exception as e:
            logger.warning(f"Could not get chat info for {channel_info}: {e}")
        
        # Crear canal
        channel = Channel(
            channel_id=channel_info,
            channel_name=channel_name,
            channel_username=channel_username
        )
        
        session.add(channel)
        session.commit()
        
        context.user_data.pop('state', None)
        
        await update.message.reply_text(f"‚úÖ Canal a√±adido: `{channel_info}`", parse_mode='Markdown')
        
    except Exception as e:
        session.rollback()
        logger.error(f"Error adding channel: {e}")
        await update.message.reply_text(f"‚ùå Error: {str(e)}")
    finally:
        session.close()

def extract_channel_info(text):
    """Extrae informaci√≥n del canal del texto"""
    patterns = [
        r't\.me/([a-zA-Z0-9_]+)',  # t.me/username
        r'@([a-zA-Z0-9_]+)',       # @username
        r'(-100\d+)',              # Channel ID
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            if pattern == r'@([a-zA-Z0-9_]+)':
                return '@' + match.group(1)
            elif pattern == r't\.me/([a-zA-Z0-9_]+)':
                return '@' + match.group(1)
            else:
                return match.group(1)
    
    return None
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "list_posts":
        await list_posts(query)
    elif data.startswith("post_"):
        await handle_post_action(query, data)
    elif data == "create_post":
        await create_post_prompt(query)
    elif data.startswith("configure_"):
        await configure_post(query, data)
    elif data == "manage_channels":
        await manage_channels(query)
    elif data.startswith("channel_"):
        await handle_channel_action(query, data)
    elif data == "statistics":
        await show_statistics(query)

async def list_posts(query):
    session = get_session()
    posts = session.query(Post).filter_by(is_active=True).all()
    session.close()
    
    if not posts:
        await query.edit_message_text("No hay posts activos.")
        return
    
    keyboard = []
    for post in posts:
        keyboard.append([
            InlineKeyboardButton(
                f"üìÑ {post.name} ({post.content_type})", 
                callback_data=f"post_{post.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô Volver", callback_data="back_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìã **Posts Activos:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_post_action(query, data):
    post_id = int(data.split('_')[1])
    session = get_session()
    post = session.query(Post).filter_by(id=post_id).first()
    session.close()
    
    if not post:
        await query.edit_message_text("Post no encontrado.")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è Configurar Horario", callback_data=f"configure_schedule_{post_id}")],
        [InlineKeyboardButton("üì∫ Asignar Canales", callback_data=f"configure_channels_{post_id}")],
        [InlineKeyboardButton("üóëÔ∏è Eliminar Post", callback_data=f"delete_post_{post_id}")],
        [InlineKeyboardButton("üîô Volver", callback_data="list_posts")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"**Post:** {post.name}\n"
        f"**Tipo:** {post.content_type}\n"
        f"**Canal Fuente:** {post.source_channel}\n"
        f"**ID Mensaje:** {post.source_message_id}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def create_post_prompt(query):
    await query.edit_message_text(
        "üì§ **Para crear un post:**\n\n"
        "1. Ve al canal fuente\n"
        "2. Reenv√≠a el mensaje que quieres usar al bot\n"
        "3. El bot detectar√° autom√°ticamente el contenido\n\n"
        "El mensaje puede ser texto, foto, video, audio o documento."
    )

async def handle_post_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    
    message = update.channel_post or update.message
    
    # Check if we already have 5 posts
    session = get_session()
    post_count = session.query(Post).filter_by(is_active=True).count()
    
    if post_count >= MAX_POSTS:
        await message.reply_text(f"‚ùå M√°ximo {MAX_POSTS} posts permitidos. Elimina uno existente primero.")
        session.close()
        return
    
    # Extract content info
    content_type = None
    file_id = None
    text = None
    
    if message.text:
        content_type = 'text'
        text = message.text
    elif message.photo:
        content_type = 'photo'
        file_id = message.photo[-1].file_id
        text = message.caption
    elif message.video:
        content_type = 'video'
        file_id = message.video.file_id
        text = message.caption
    elif message.audio:
        content_type = 'audio'
        file_id = message.audio.file_id
        text = message.caption
    elif message.document:
        content_type = 'document'
        file_id = message.document.file_id
        text = message.caption
    
    # Create post
    post = Post(
        name=f"Post {post_count + 1}",
        source_channel=str(message.chat.id),
        source_message_id=message.message_id,
        content_type=content_type,
        content_text=text or "",
        file_id=file_id
    )
    
    session.add(post)
    session.commit()
    
    # Create default schedule
    schedule = PostSchedule(
        post_id=post.id,
        send_time="09:00",
        delete_after_hours=24,
        days_of_week="1,2,3,4,5,6,7"
    )
    session.add(schedule)
    session.commit()
    session.close()
    
    await message.reply_text(
        f"‚úÖ **Post creado exitosamente!**\n\n"
        f"**ID:** {post.id}\n"
        f"**Nombre:** {post.name}\n"
        f"**Tipo:** {content_type}\n\n"
        f"Ahora puedes configurar horarios y asignar canales.",
        parse_mode='Markdown'
    )

async def configure_post(query, data):
    post_id = int(data.split('_')[1])
    
    keyboard = [
        [InlineKeyboardButton("üïê Hora de Env√≠o", callback_data=f"set_time_{post_id}")],
        [InlineKeyboardButton("‚è∞ Horas para Eliminar", callback_data=f"set_delete_{post_id}")],
        [InlineKeyboardButton("üìÖ D√≠as de Publicaci√≥n", callback_data=f"set_days_{post_id}")],
        [InlineKeyboardButton("üîô Volver", callback_data=f"post_{post_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "‚öôÔ∏è **Configuraci√≥n del Post**\n\n"
        "Selecciona qu√© deseas configurar:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def manage_channels(query):
    keyboard = [
        [InlineKeyboardButton("‚ûï A√±adir Canal", callback_data="add_channel")],
        [InlineKeyboardButton("‚ûñ Eliminar Canal", callback_data="remove_channel")],
        [InlineKeyboardButton("üìã Ver Canales", callback_data="list_channels")],
        [InlineKeyboardButton("üîô Volver", callback_data="back_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üì∫ **Gesti√≥n de Canales**\n\n"
        "Selecciona una opci√≥n:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_statistics(query):
    session = get_session()
    
    total_posts = session.query(Post).filter_by(is_active=True).count()
    total_channels = session.query(Channel).count()
    total_scheduled = session.query(PostSchedule).filter_by(is_enabled=True).count()
    
    session.close()
    
    await query.edit_message_text(
        f"üìä **Estad√≠sticas del Bot**\n\n"
        f"**Posts Activos:** {total_posts}\n"
        f"**Canales Registrados:** {total_channels}\n"
        f"**Horarios Activos:** {total_scheduled}\n\n"
        f"**L√≠mite de Posts:** {MAX_POSTS}",
        parse_mode='Markdown'
    )

